(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 7849, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 688, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 2728, in __init__\n    if do_connect: self.reconnect()\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 648, in reconnect\n    self.connection = f()\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 2726, in connector\n    return self.driver.connect(**driver_args)\n  File "/usr/lib64/python2.7/site-packages/MySQLdb/__init__.py", line 81, in Connect\n    return Connection(*args, **kwargs)\n  File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py", line 187, in __init__\n    super(Connection, self).__init__(*args, **kwargs2)\nOperationalError: (2002, "Can\'t connect to local MySQL server through socket \'/var/run/mysql/mysql.sock\' (2)")\n'
p3
sS'layer'
p4
S'/home/eddgt/public_html/web2py/web2py/applications/test_app/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    #db = DAL(\'sqlite://storage.sqlite\',pool_size=1,check_reserved=[\'all\'])\n    db=DAL(\'mysql://root:@localhost/test\')\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename=\'private/janrain.key\')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n\n# PRODUCTS and CUSTOMERS will be added to the database automatically\n# as dummy data\n\nPRODUCTS = [("spamelon", 10.34, "Kg"), ("banana", 32.32, "Kg"),\n            ("waterspamelon", 2.32, "Kg"), ("cherry", 32.33, "Kg"),\n            ("raspberry", 19.34, "Kg"), ("pear", 23.21, "Kg"),\n            ("pineapple", 24.12, "Kg"), ("orange", 12.34, "Kg"),\n            ("grapefruit", 10.03, "Kg"), ("tangerine", 20.30, "Kg"),\n            ("apple", 02.23, "Kg"), ("fig", 20.24, "Kg"),\n            ("kiwi", 10.02, "Kg"), ("strawberry", 20.21, "Kg"),\n            ("discount", -1.00, "units"), ("charge", 1.00, "units" )]\n\nCUSTOMERS = [("Michael", "23423084230"), ("John", "320984230984"),\n             ("Graham", "234092349"), ("Terry", "23094230"),\n             ("Eric", "0923840293")]\n\n# STATUSES indicates wether an invoice can be edited (is open) or\n# it is closed. Closed operations can be locked for archive purposes\n# or cancelled\n\nPRODUCTOS = [("spamelon", 10.34, "Kg"), ("banana", 32.32, "Kg"),\n            ("waterspamelon", 2.32, "Kg"), ("cherry", 32.33, "Kg"),\n            ("raspberry", 19.34, "Kg"), ("pear", 23.21, "Kg"),\n            ("pineapple", 24.12, "Kg"), ("orange", 12.34, "Kg"),\n            ("grapefruit", 10.03, "Kg"), ("tangerine", 20.30, "Kg"),\n            ("apple", 02.23, "Kg"), ("fig", 20.24, "Kg"),\n            ("kiwi", 10.02, "Kg"), ("strawberry", 20.21, "Kg"),\n            ("discount", -1.00, "units"), ("charge", 1.00, "units" )]\n\nCLIENTES = [("Michael", "23423084230"), ("John", "320984230984"),\n             ("Graham", "234092349"), ("Terry", "23094230"),\n             ("Eric", "0923840293")]\n\n\n\nSTATUSES = {"open": T("Open"), "locked": T("Locked"),\n            "cancelled": T("Cancelled")}\n\nESTADOS = {"abierta": T("Abierta"), "bloqueada": T("Bloqueada"),\n            "cancelada": T("Cancelada")}\n\nPAYMENTS = ["cash", "credit card", "other"]\n\nCONTRIBUYENTES = ["efectivo", "tarjeta", "otro"]\n\nUNITS = ["units", "Kg", "g", "l"]\n\nUNIDADES = ["unds", "Kg", "g", "l"]\n\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\n# The bill\'s recipient\ndb.define_table("customer",\n                Field("name"),\n                Field("taxpayer"),\n                format="%(name)s (%(taxpayer)s)")\n\n\ndb.define_table("invoice",\n                Field("created_on", "datetime", default=request.now),\n                Field("created_by", "reference auth_user",\n                      default=auth.user_id, writable=False),\n                Field("customer_id", "reference customer"),\n                Field("description"),\n                Field("total", "double",\n                      writable=False, default=0.00),\n                Field("payment", requires=IS_IN_SET(PAYMENTS)),\n                Field("status", requires=IS_IN_SET(STATUSES),\n                      default="open", writable=False),\n                format="%(id)s")\n\ndb.define_table("concepto",\n                Field("nombre"),\n                Field("descripcion"),\n                Field("monto", "double", default=0.00),\n                Field("medida", requires=IS_IN_SET(UNIDADES),\n                      default="unds"),\n                format="%(nombre)s: $%(monto)s (%(medida)s)")\n\n\ndb.define_table("cliente",\n                Field("nombre"),\n                Field("contribuyente"),\n                format="%(nombre)s (%(contribuyente)s)")\n\ndb.define_table("factura",\n                Field("creada_en", "datetime", default=request.now),\n                Field("creada_por", "reference auth_user",\n                      default=auth.user_id, writable=False),\n                Field("cliente_id", "reference cliente"),\n                Field("descripcion"),\n                Field("total", "double",\n                      writable=False, default=0.00),\n                Field("tipopago", requires=IS_IN_SET(CONTRIBUYENTES)),\n                Field("status", requires=IS_IN_SET(ESTADOS),\n                      default="abierto", writable=False),\n                format="%(id)s")\n\ndb.define_table("item",\n                Field("factura_id", "reference factura",\n                      default=session.factura_id,\n                      writable=False),\n                Field("concepto_id", "reference concepto"),\n                Field("monto", "double", default=0.00),\n                Field("total", "double", default=0.00,\n                      writable=False),\n                format=lambda record: record.concepto_id.nombre)\n\n\n# Here we link invoice ids to the invoice details page.\ndb.factura.id.represent = lambda id, field: \\\n    A(id, _href=URL(c="default", f="factura", args=["factura", id]))\n\n# Automatically add dummy data (not recommended in production)\nif db(db.cliente).count() <= 0:\n    for cliente in CLIENTES:\n        db.cliente.insert(nombre=cliente[0],\n                           contribuyente=cliente[1])\n    for producto in PRODUCTOS:\n       db.concepto.insert(nombre=producto[0], monto=producto[1],\n                         medida=producto[2])\n\n# This will be called by the business logic to update open invoices.\n# It computes the invoice items and updates the total amounts\ndef factura_total(factura):\n    if factura.status in ("bloqueada", "cancelada"): return\n    items = db(db.item.factura_id==factura.id).select()\n    total = 0.00\n    for item in items:\n        item_total = item.monto * item.concepto_id.monto\n        item.update_record(total=item_total)\n        total += item_total\n    factura.update_record(total=total)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/eddgt/public_html/web2py/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/eddgt/public_html/web2py/web2py/applications/test_app/models/db.py", line 15, in <module>\n    db=DAL(\'mysql://root:@localhost/test\')\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 7871, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 7849, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 688, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 2728, in __init__\n    if do_connect: self.reconnect()\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 648, in reconnect\n    self.connection = f()\n  File "/home/eddgt/public_html/web2py/web2py/gluon/dal.py", line 2726, in connector\n    return self.driver.connect(**driver_args)\n  File "/usr/lib64/python2.7/site-packages/MySQLdb/__init__.py", line 81, in Connect\n    return Connection(*args, **kwargs)\n  File "/usr/lib64/python2.7/site-packages/MySQLdb/connections.py", line 187, in __init__\n    super(Connection, self).__init__(*args, **kwargs2)\nOperationalError: (2002, "Can\'t connect to local MySQL server through socket \'/var/run/mysql/mysql.sock\' (2)")\n\n'
p11
s.